# week08/.github/workflows/frontend_cd.yml
name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://4.237.194.135:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://4.200.121.202:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'sit722week08aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'sit722week08'

  workflow_call:
    inputs:
      product_api_ip:    { required: true, type: string }
      order_api_ip:      { required: true, type: string }
      aks_cluster_name:  { required: true, type: string }
      aks_resource_group:{ required: true, type: string }

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # --- ACR login (uses ACR_NAME secret) ---
      - name: Validate ACR_NAME secret is present
        run: |
          test -n "${{ secrets.ACR_NAME }}" || (echo "ACR_NAME secret is missing"; exit 1)

      - name: Resolve ACR login server
        run: |
          echo "ACR_LOGIN_SERVER=$(az acr show -n ${{ secrets.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_ENV
          echo "Resolved ACR login server: $ACR_LOGIN_SERVER"

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # --- Optional: inject IPs (safe if placeholders already replaced; sed will no-op) ---
      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting IPs into frontend/main.js (no-op if already set)"
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js || true
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"   frontend/main.js || true
          echo "--- main.js (head) ---"; head -n 15 frontend/main.js; echo "---------------------"

      # Build & push the frontend image to your ACR
      - name: Build and Push Frontend Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:latest ./frontend
          docker push  $ACR_LOGIN_SERVER/frontend:latest

      # Get AKS credentials
      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --overwrite-existing

      # Deploy frontend (ensure the manifest uses your ACR login server)
      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend to AKS cluster: ${{ inputs.aks_cluster_name }}"
          cd k8s/
          # If your manifest uses a placeholder for image, update it prior to apply.
          # Otherwise ensure it already points to: $ACR_LOGIN_SERVER/frontend:latest
          kubectl apply -f frontend.yaml
          echo "Current services:"; kubectl get svc

      - name: Logout from Azure
        if: always()
        run: az logout || true

